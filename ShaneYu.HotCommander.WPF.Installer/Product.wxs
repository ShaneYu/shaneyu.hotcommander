<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension">
  <!-- Include Variables. -->
  <?include Variables.wxi ?>

  <!-- The product IDs must be auto generated (*) or else major upgrades will not work. -->
  <!-- The upgrade code must never change as long as the product lives.  -->
  <Product Id="$(var.ProductCode)"
           UpgradeCode="$(var.UpgradeCode)"
           Version="$(var.ProductVersion)"
           Name="!(loc.ProductName)"
           Language="!(loc.Language)"
           Manufacturer="!(loc.ProductManufacturer)">

    <!-- Package IDs are valid for a single package version only - they are auto generated by WiX -->
    <!-- Use Windows Installer version 4.0 (included in Windows Vista and above) -->
    <!-- Always install per machine!!! -->
    <Package Id="*"
             InstallerVersion="400"
             Compressed="yes"
             InstallScope="perMachine"
             Description="!(loc.ProductDescription)"
             Comments="!(loc.Comments) v$(var.ProductVersion)"  />

    <!-- Real license agreement text will be loaded from file. -->
    <WixVariable Id="WixUILicenseRtf" Value="dummy" />

    <!-- UI Customization -->
    <!--<WixVariable Id="WixUIBannerBmp" Value="images/BannerTop.bmp" />
    <WixVariable Id="WixUIDialogBmp" Value="images/Dialog.bmp" />-->

    <!-- ID should not be longer than 18 chars and must end with ".exe" -->
    <Icon Id="Icon.exe" SourceFile="$(var.HotCommanderUI.TargetDir)app.ico" />
    
    <!-- Set properties for add/remove programs -->
    <Property Id="ARPPRODUCTICON" Value="Icon.exe" />
    <Property Id="ARPHELPLINK" Value="$(var.InfoURL)" />
    <Property Id="ARPNOREPAIR" Value="yes" Secure="yes" /> <!-- Remove Repaire -->
    <Property Id="ARPNOMODIFY" Value="yes" Secure="yes" /> <!-- Remove Modify -->

    <!-- AllowSameVersionUpgrades - Always upgrade, never allow two versions to be installed next to each other. -->
    <!-- AllowSameVersionUpgrades causes ICE61, which must be ingored in project settings. -->
    <MajorUpgrade DowngradeErrorMessage="!(loc.NewerInstalled)" AllowSameVersionUpgrades="yes" />

    <InstallExecuteSequence>
      <!-- Determine the install location after the install path has been validated by the installer. -->
      <Custom Action="SetARPINSTALLLOCATION" After="InstallValidate" />
    </InstallExecuteSequence>

    <!-- Set up ARPINSTALLLOCATION property (http://blogs.technet.com/b/alexshev/archive/2008/02/09/from-msi-to-wix-part-2.aspx) -->
    <CustomAction Id="SetARPINSTALLLOCATION" Property="ARPINSTALLLOCATION" Value="[INSTALLDIR]" />

    <!-- 
         Launch conditions
 
         1. Check minimum OS version 
            If not, the installation is aborted.
            By doing the (Installed OR ...) property means that this condition will only be evaluated if the app is being installed and not on uninstall or changing
 
            Note: Under a Product element, a condition becomes a LaunchCondition entry. 
      -->
    <Condition Message="!(loc.OS2Old)">
      <![CDATA[Installed OR (VersionNT >= 600)]]>
    </Condition>

    <!-- 
         2. Check OS bitness
            Unfortunately 32-bit MSI packages cannot write to 64-bit ProgramFiles directory. That is the only reason we need separate MSIs for 32-bit and 64-bit.
      -->
    <?if $(var.Platform) = x64 ?>
      <Condition Message="!(loc.x86VersionRequired)">
        <![CDATA[VersionNT64]]>
      </Condition>
    <?endif?>
    <?if $(var.Platform) = x86 ?>
      <Condition Message="!(loc.x64VersionRequired)">
        <![CDATA[NOT VersionNT64]]>
      </Condition>
    <?endif?>
    
    <!--
         3. Check DOTNET Framework
            Check to ensure that the DOTNET 4.5.2 framework or later is installed on the machine.
      -->
    <PropertyRef Id="WIX_IS_NETFRAMEWORK_452_OR_LATER_INSTALLED"/>
    <Condition Message="!(loc.NetFx2Old)">
      <![CDATA[Installed OR WIX_IS_NETFRAMEWORK_452_OR_LATER_INSTALLED]]>
    </Condition>

    <!-- Save the command line value INSTALLDIR and restore it later in the sequence or it will be overwritten by the value saved to the registry during an upgrade. -->
    <!-- http://robmensching.com/blog/posts/2010/5/2/the-wix-toolsets-remember-property-pattern/ -->
    <CustomAction Id='SaveCmdLineValueINSTALLDIR' Property='CMDLINE_INSTALLDIR' Value='[INSTALLDIR]' Execute='firstSequence' />
    <CustomAction Id='SetFromCmdLineValueINSTALLDIR' Property='INSTALLDIR' Value='[CMDLINE_INSTALLDIR]' Execute='firstSequence' />
    <InstallUISequence>
      <Custom Action='SaveCmdLineValueINSTALLDIR' Before='AppSearch' />
      <Custom Action='SetFromCmdLineValueINSTALLDIR' After='AppSearch'>
        CMDLINE_INSTALLDIR
      </Custom>
    </InstallUISequence>
    <InstallExecuteSequence>
      <Custom Action='SaveCmdLineValueINSTALLDIR' Before='AppSearch' />
      <Custom Action='SetFromCmdLineValueINSTALLDIR' After='AppSearch'>
        CMDLINE_INSTALLDIR
      </Custom>
    </InstallExecuteSequence>

    <!-- Determine the directory of a previous installation (if one exists). If not INSTALLDIR stays empty. -->
    <Property Id="INSTALLDIR">
      <RegistrySearch Id="DetermineInstallLocation" Type="raw" Root="HKLM" Key="Software\!(loc.ProductManufacturer)\InstalledProducts\!(loc.ProductName)" Name="InstallLocation" />
    </Property>

    <!-- We do not have more than one medium (Floppy, CD, ...). Everything in one file. -->
    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />

    <!-- Outermost folder (kind of virtual). Fixed entry. -->
    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="$(var.PlatformProgramFilesFolder)">
        <Directory Id="ProgramFilesHK" Name="!(loc.ProductManufacturer)">
          <Directory Id="INSTALLDIR" Name="!(loc.ProductName)" />
        </Directory>
      </Directory>
      <Directory Id="ProgramMenuFolder">
        <Directory Id="ApplicationProgramsFolder" Name="!(loc.ProductName)" />
      </Directory>
      <Directory Id="DesktopFolder" Name="Desktop" />
      <Component Id="RegValInstallLocation_comp" Guid="72EDA383-A209-4E9C-B5D3-EB6A2F895591">
        <!-- Do NOT use the application's default registry key here, because THIS key will be removed on uninstall
                 (important when installing a newer version, because that is uninstall followed by install) -->
        <RegistryKey Root="HKLM" Key="Software\!(loc.ProductManufacturer)\InstalledProducts\!(loc.ProductName)">
          <RegistryValue Name="InstallLocation" Value="[INSTALLDIR]" Type="string" KeyPath="yes" />
        </RegistryKey>
      </Component>
    </Directory>

    <!-- Features define which parts of the application can be installed in a custom installation -->
    <Feature Id="Complete" Title="!(loc.ProductName)" Description="!(loc.FeatureCompleteDescription)" Display="expand" Level="1" ConfigurableDirectory="INSTALLDIR">
      <!-- A feature block for the main (GUI) program and all its dependencies -->
      <Feature Id="MainProgram" Title="!(loc.FeatureMainProgramTitle)" Description="!(loc.FeatureMainProgramDescription)" Level="1">
        <!-- Application Files -->
        <ComponentRef Id="INSTALLDIR_comp" />
        <ComponentRef Id="HotCommanderExe_comp" />
        <ComponentRef Id="HotCommanderExeConfig_comp" />
        <ComponentRef Id="AppPng_comp" />
        <ComponentRef Id="AppIco_comp" />
        <ComponentRef Id="ShaneYuHotCommanderDll_comp" />
        <ComponentRef Id="AutofacDll_comp" />
        <ComponentRef Id="HarvesterCoreDll_comp" />
        <ComponentRef Id="HarvesterIntegrationNLogDll_comp" />
        <ComponentRef Id="MahAppsMetroDll_comp" />
        <ComponentRef Id="NewtonsoftJsonDll_comp" />
        <ComponentRef Id="NHotKeyDll_comp" />
        <ComponentRef Id="NHotKeyWpfDll_comp" />
        <ComponentRef Id="NLogDll_comp" />
        <ComponentRef Id="SystemWindowsInteractivityDll_comp" />
        <ComponentRef Id="EulaEnRtf_comp" />

        <!-- Application Shortcuts -->
        <ComponentRef Id="ApplicationShortcut" />
        <ComponentRef Id="ApplicationShortcutDesktop" />
        
        <!-- Registry Entries -->
        <ComponentRef Id="RegValInstallLocation_comp" />
      </Feature>
    </Feature>

    <UI>
      <!-- Define the installer UI -->
      <UIRef Id="WixUI_HK" />
    </UI>

    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLDIR" />
  </Product>

  <!-- Application Shortcuts -->
  <Fragment>
    <DirectoryRef Id="ApplicationProgramsFolder">
      <Component Id="ApplicationShortcut" Guid="47AB941F-8CFA-4915-95BD-D910CDD9E66F">
        <Shortcut Id="ApplicationStartMenuShortcut" Name="!(loc.ProductName)" Description="!(loc.ProductDescription)" Target="[INSTALLDIR]HotCommander.exe" WorkingDirectory="INSTALLDIR" />
        <RemoveFolder Id="RemoveApplicationProgramsFolder" Directory="ApplicationProgramsFolder" On="uninstall" />
        <RegistryValue Root="HKCU" Key="Software\!(loc.ProductManufacturer)\!(loc.ProductName)" Name="installed" Type="integer" Value="1" KeyPath="yes" />
      </Component>
    </DirectoryRef>
    <DirectoryRef Id="DesktopFolder">
      <Component Id="ApplicationShortcutDesktop" Guid="9FA9980C-B3DC-439C-ACE6-CD47D0916025">
        <Shortcut Id="ApplicationDesktopShortcut" Name="!(loc.ProductName)" Description="!(loc.ProductDescription)" Target="[INSTALLDIR]HotCommander.exe" WorkingDirectory="INSTALLDIR" />
        <RemoveFolder Id="RemoveDesktopFolder" Directory="DesktopFolder" On="uninstall" />
        <RegistryValue Root="HKCU" Key="Software\!(loc.ProductManufacturer)\!(loc.ProductName)" Name="installed" Type="integer" Value="1" KeyPath="yes" />
      </Component>
    </DirectoryRef>
  </Fragment>

  <!-- Application Files -->
  <Fragment>
    <DirectoryRef Id="INSTALLDIR">
      <!-- Installation directory as a component so it can be emptied during uninstall (by default files added by someone other than Windows Installer are not removed) -->
      <Component Id="INSTALLDIR_comp" Guid="DE64588F-04C7-4C72-BD04-B1B9848C8FD2">
        <CreateFolder />
        <RemoveFile Id="RemoveFilesFromAppDirectory" Name="*.*" On="uninstall" />
      </Component>

      <Component Id="HotCommanderExe_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)HotCommander.exe" Id="HotCommanderExe" KeyPath="yes" />
      </Component>

      <Component Id="HotCommanderExeConfig_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)HotCommander.exe.config" Id="HotCommanderExeConfig" KeyPath="yes" />
      </Component>

      <Component Id="AppPng_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)app.png" Id="AppPng" KeyPath="yes" />
      </Component>

      <Component Id="AppIco_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)app.ico" Id="AppIco" KeyPath="yes" />
      </Component>

      <Component Id="ShaneYuHotCommanderDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)ShaneYu.HotCommander.Core.dll" Id="ShaneYuHotCommanderDll" KeyPath="yes" />
      </Component>

      <Component Id="AutofacDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)Autofac.dll" Id="AutofacDll" KeyPath="yes" />
      </Component>

      <Component Id="HarvesterCoreDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)Harvester.Core.dll" Id="HarvesterCoreDll" KeyPath="yes" />
      </Component>

      <Component Id="HarvesterIntegrationNLogDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)Harvester.Integration.NLog.dll" Id="HarvesterIntegrationNLogDll" KeyPath="yes" />
      </Component>

      <Component Id="MahAppsMetroDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)MahApps.Metro.dll" Id="MahAppsMetroDll" KeyPath="yes" />
      </Component>

      <Component Id="NewtonsoftJsonDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)Newtonsoft.Json.dll" Id="NewtonsoftJsonDll" KeyPath="yes" />
      </Component>

      <Component Id="NHotKeyDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)NHotKey.dll" Id="NHotKeyDll" KeyPath="yes" />
      </Component>

      <Component Id="NHotKeyWpfDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)NHotKey.Wpf.dll" Id="NHotKeyWpfDll" KeyPath="yes" />
      </Component>

      <Component Id="NLogDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)NLog.dll" Id="NLogDll" KeyPath="yes" />
      </Component>

      <Component Id="SystemWindowsInteractivityDll_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)System.Windows.Interactivity.dll" Id="SystemWindowsInteractivityDll" KeyPath="yes" />
      </Component>

      <Component Id="EulaEnRtf_comp" Guid="*" Win64="$(var.Win64)">
        <File Source="$(var.HotCommanderUI.TargetDir)Eula-en.rtf" Id="EulaEnRtf" KeyPath="yes" />
      </Component>
    </DirectoryRef>
  </Fragment>
</Wix>